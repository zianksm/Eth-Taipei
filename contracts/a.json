{"language":"Solidity","sources":{"src/module/ApproveExec.sol":{"content":"pragma solidity ^0.8.0;\n\nimport {IERC20} from \"openzeppelin-contracts/contracts/interfaces/IERC20.sol\";\nimport {IIntent} from \"./../interfaces/IIntent.sol\";\n\ncontract SimpleExecBatchModule {\n\n    // will just arbitrarily execute everything\n    function execBatch(IIntent.Call[] memory calls) public {\n        for (uint256 i = 0; i < calls.length; i++) {\n            IIntent.Call memory call = calls[i];\n\n            (bool success,) = call.dest.call(call.data);\n\n            require(success, \"failed delegation call\");\n        }\n    }\n}\n"},"node_modules/@openzeppelin/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"},"src/interfaces/IIntent.sol":{"content":"pragma solidity ^0.8.0;\n\ninterface IIntent {\n    function getOrderReserves(bytes32 id) external view returns (IIntent.OrderReserves memory);\n    \n    type IntentId is bytes32;\n\n    event Reserved(address indexed filler, bytes32 order);\n\n    struct Call {\n        address dest;\n        bytes data;\n    }\n\n    struct Intents {\n        address inToken;\n        address outToken;\n    }\n\n    struct IntentSpecification {\n        uint256 inAmount;\n        uint256 outAmount;\n    }\n\n    enum BankType {\n        WISE\n    }\n\n    struct OrderData {\n        address token;\n        uint256 amount;\n        BankType bankType;\n        uint256 bankNumber;\n    }\n\n    struct OrderMessage {\n        bytes32 id;\n        uint256 amount;\n    }\n\n    struct OrderReserves {\n        address token;\n        uint256 amount;\n        BankType bankType;\n        uint256 bankAccountDest;\n        OrderReserve inner;\n    }\n\n    struct OrderReserve {\n        address filler;\n        uint256 amount;\n        uint256 deposit;\n    }\n}\n"},"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"}},"settings":{"remappings":["@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","intents-framework/=lib/intents-framework/solidity/src/","openzeppelin-contracts/=node_modules/@openzeppelin/","@uniswap/=node_modules/@uniswap/","@hyperlane-xyz/=node_modules/@hyperlane-xyz/core/contracts/","@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"useLiteralContent":false,"bytecodeHash":"ipfs","appendCBOR":true},"outputSelection":{"*":{"*":["abi","evm.bytecode.object","evm.bytecode.sourceMap","evm.bytecode.linkReferences","evm.deployedBytecode.object","evm.deployedBytecode.sourceMap","evm.deployedBytecode.linkReferences","evm.deployedBytecode.immutableReferences","evm.methodIdentifiers","metadata"]}},"evmVersion":"cancun","viaIR":false,"libraries":{}}}
